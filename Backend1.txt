// COMPLETE FIXED BACKEND CODE - Replace your entire Backend1.txt with this

// ============================================
// GAMS Attendance System - Backend
// ============================================

const SHEET_ID = SpreadsheetApp.getActiveSpreadsheet().getId();

// ============================================
// Main Request Handlers
// ============================================

function doGet(e) {
  return handleRequest(e);
}

function doPost(e) {
  return handleRequest(e);
}

function handleRequest(e) {
  const action = e.parameter.action;
  
  // Log incoming requests for debugging
  Logger.log('=== INCOMING REQUEST ===');
  Logger.log('Action: ' + action);
  Logger.log('All parameters: ' + JSON.stringify(e.parameter));
  
  try {
    switch(action) {
      case 'testConnection':
        return responseToJSON(testConnection());
      case 'testSheetWrite':
        return responseToJSON(testSheetWrite());
      case 'testDirectSave':
        return responseToJSON(testDirectSave(e.parameter));
      case 'getClasses':
        return responseToJSON(getClasses());
      case 'getTerms':
        return responseToJSON(getTerms());
      case 'getAttendance':
        return responseToJSON(getAttendance(e.parameter));
      case 'saveAttendance':
        return responseToJSON(saveAttendanceWithLogging(e.parameter));
      case 'saveClass':
        return responseToJSON(saveClass(e.parameter));
      case 'saveAllClasses':
        return responseToJSON(saveAllClasses(e.parameter));
      case 'saveClasses':
        return responseToJSON(saveClasses(e.parameter));
      case 'saveTerms':
        return responseToJSON(saveTerms(e.parameter));
      case 'getAttendanceStats':
        return responseToJSON(getAttendanceStats(e.parameter));
      case 'setupSheets':
        return responseToJSON(setupSheets());
      default:
        return responseToJSON({error: 'Invalid action: ' + action});
    }
  } catch (error) {
    Logger.log('ERROR in handleRequest: ' + error.message);
    Logger.log('Stack: ' + error.stack);
    return responseToJSON({error: error.message});
  }
}

function responseToJSON(data) {
  return ContentService.createTextOutput(JSON.stringify(data))
    .setMimeType(ContentService.MimeType.JSON);
}

// ============================================
// Test Functions
// ============================================

function testConnection() {
  return {
    success: true,
    message: 'Backend connection successful',
    timestamp: new Date().toISOString()
  };
}

function testSheetWrite() {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheet = ss.getSheetByName('Attendance');
    
    if (!sheet) {
      return { success: false, error: 'Attendance sheet not found' };
    }
    
    const testRow = ['TEST', 'TEST', 'TEST', 'TEST', 0, 0, 0, new Date().toISOString(), 'am'];
    sheet.appendRow(testRow);
    SpreadsheetApp.flush();
    
    const lastRow = sheet.getLastRow();
    const writtenData = sheet.getRange(lastRow, 1, 1, 9).getValues()[0];
    
    return {
      success: true,
      message: 'Test write successful',
      rowNumber: lastRow,
      writtenData: writtenData
    };
  } catch (err) {
    return {
      success: false,
      error: err.message,
      stack: err.stack
    };
  }
}

function testDirectSave(params) {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheet = ss.getSheetByName('Attendance');
    
    if (!sheet) {
      return { success: false, error: 'Attendance sheet not found' };
    }
    
    Logger.log('testDirectSave params: ' + JSON.stringify(params));
    
    const date = params.date || '2025-01-15';
    const classId = params.classId || '1';
    const term = params.term || 'term1';
    const week = params.week || '1';
    const session = params.session || 'am';
    const males = parseInt(params.malesPresent || 0);
    const females = parseInt(params.femalesPresent || 0);
    
    const record = [
      date,
      classId,
      term,
      week,
      males,
      females,
      males + females,
      new Date().toISOString(),
      session
    ];
    
    Logger.log('About to append: ' + JSON.stringify(record));
    
    sheet.appendRow(record);
    SpreadsheetApp.flush();
    
    const lastRow = sheet.getLastRow();
    Logger.log('Row appended at: ' + lastRow);
    
    return {
      success: true,
      message: 'Direct save successful',
      rowNumber: lastRow,
      record: record
    };
    
  } catch (err) {
    Logger.log('ERROR: ' + err.message);
    return {
      success: false,
      error: err.message,
      stack: err.stack
    };
  }
}

// ============================================
// Attendance Functions (FIXED)
// ============================================

function ensureAttendanceSheetAndHeaders() {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    let sheet = ss.getSheetByName('Attendance');

    const attendanceHeaders = [
      'Date',
      'ClassID',
      'Term',
      'Week',
      'MalesPresent',
      'FemalesPresent',
      'TotalPresent',
      'Timestamp',
      'Session'
    ];

    if (!sheet) {
      Logger.log('Creating new Attendance sheet');
      sheet = ss.insertSheet('Attendance');
      sheet.getRange(1, 1, 1, attendanceHeaders.length).setValues([attendanceHeaders]);
      sheet.getRange(1, 1, 1, attendanceHeaders.length).setFontWeight('bold');
      SpreadsheetApp.flush();
      Logger.log('Attendance sheet created with headers');
      return sheet;
    }

    // Check if headers are correct
    const lastCol = sheet.getLastColumn();
    if (lastCol < attendanceHeaders.length) {
      Logger.log('Headers missing or incomplete - setting headers');
      sheet.getRange(1, 1, 1, attendanceHeaders.length).setValues([attendanceHeaders]);
      sheet.getRange(1, 1, 1, attendanceHeaders.length).setFontWeight('bold');
      SpreadsheetApp.flush();
    } else {
      const existing = sheet.getRange(1, 1, 1, attendanceHeaders.length).getValues()[0];
      let needsUpdate = false;
      
      for (let i = 0; i < attendanceHeaders.length; i++) {
        if (existing[i] !== attendanceHeaders[i]) {
          needsUpdate = true;
          break;
        }
      }
      
      if (needsUpdate) {
        Logger.log('Headers incorrect - updating headers');
        sheet.getRange(1, 1, 1, attendanceHeaders.length).setValues([attendanceHeaders]);
        sheet.getRange(1, 1, 1, attendanceHeaders.length).setFontWeight('bold');
        SpreadsheetApp.flush();
      }
    }

    Logger.log('Attendance sheet ready with correct headers');
    return sheet;
    
  } catch (err) {
    Logger.log('ERROR in ensureAttendanceSheetAndHeaders: ' + err.message);
    throw err;
  }
}

function saveAttendanceRecord(params) {
  try {
    Logger.log('=== START saveAttendanceRecord ===');
    Logger.log('Params received: ' + JSON.stringify(params));
    
    const sheet = ensureAttendanceSheetAndHeaders();
    
    if (!sheet) {
      return { success: false, error: 'Could not access Attendance sheet' };
    }
    
    Logger.log('Sheet accessed: ' + sheet.getName());

    const {
      date,
      classId,
      term,
      week,
      session,
      malesPresent,
      femalesPresent
    } = params || {};

    // Validate required fields
    if (!date || !classId || !term || (week === undefined || week === null || week === '')) {
      Logger.log('ERROR: Missing required fields');
      return { success: false, error: 'Missing required fields: date, classId, term, week' };
    }

    // Normalize session value
    const sessionValue = (session || 'am').toString().trim().toLowerCase();
    
    // Validate session value
    if (sessionValue !== 'am' && sessionValue !== 'pm') {
      Logger.log('ERROR: Invalid session value: ' + sessionValue);
      return { success: false, error: 'Session must be either "am" or "pm"' };
    }

    const males = parseInt(malesPresent || 0, 10) || 0;
    const females = parseInt(femalesPresent || 0, 10) || 0;
    const totalPresent = males + females;
    const timestamp = (new Date()).toISOString();

    Logger.log('Parsed values - Date: ' + date + ', ClassID: ' + classId + ', Session: ' + sessionValue);
    Logger.log('Males: ' + males + ', Females: ' + females + ', Total: ' + totalPresent);

    // Validate against class totals if available
    let classObj = null;
    if (typeof getClassById === 'function') {
      try { 
        classObj = getClassById(classId); 
      } catch (e) { 
        Logger.log('Could not get class info: ' + e.message);
      }
      
      if (classObj) {
        if (classObj.TotalMales !== undefined && !isNaN(classObj.TotalMales) && males > classObj.TotalMales) {
          Logger.log('ERROR: Males present exceeds class total');
          return { success: false, error: `Males present (${males}) exceeds total males in class (${classObj.TotalMales})` };
        }
        if (classObj.TotalFemales !== undefined && !isNaN(classObj.TotalFemales) && females > classObj.TotalFemales) {
          Logger.log('ERROR: Females present exceeds class total');
          return { success: false, error: `Females present (${females}) exceeds total females in class (${classObj.TotalFemales})` };
        }
      }
    }

    // Prepare the record to save
    const record = [date, classId, term, week, males, females, totalPresent, timestamp, sessionValue];
    Logger.log('Record to save: ' + JSON.stringify(record));

    // Get current last row
    const lastRow = sheet.getLastRow();
    Logger.log('Current last row: ' + lastRow);
    
    if (lastRow <= 1) {
      // Only headers or empty sheet - append new record
      Logger.log('Sheet is empty or has only headers - appending new row');
      sheet.appendRow(record);
      SpreadsheetApp.flush();
      
      const newLastRow = sheet.getLastRow();
      Logger.log('After append, last row is: ' + newLastRow);
      
      return {
        success: true,
        message: 'Attendance saved successfully (new record)',
        record: {
          Date: date,
          ClassID: classId,
          Term: term,
          Week: week,
          MalesPresent: males,
          FemalesPresent: females,
          TotalPresent: totalPresent,
          Timestamp: timestamp,
          Session: sessionValue
        }
      };
    }

    // Get all data to search for duplicates
    const dataRange = sheet.getRange(2, 1, lastRow - 1, 9);
    const allValues = dataRange.getValues();
    
    Logger.log('Retrieved ' + allValues.length + ' data rows to search');
    
    // Normalize the search values
    const searchDate = date.toString().trim();
    const searchClassId = classId.toString().trim();
    
    Logger.log('Searching for match: Date=' + searchDate + ', ClassID=' + searchClassId + ', Session=' + sessionValue);
    
    // Find existing record
    let foundRow = -1;
    for (let i = 0; i < allValues.length; i++) {
      const row = allValues[i];
      
      const rowDate = (row[0] !== undefined && row[0] !== null && row[0] !== '') 
        ? row[0].toString().trim() 
        : '';
      const rowClassId = (row[1] !== undefined && row[1] !== null && row[1] !== '') 
        ? row[1].toString().trim() 
        : '';
      const rowSession = (row[8] !== undefined && row[8] !== null && row[8] !== '') 
        ? row[8].toString().trim().toLowerCase() 
        : '';
      
      Logger.log('Checking row ' + (i + 2) + ': Date=' + rowDate + ', ClassID=' + rowClassId + ', Session=' + rowSession);
      
      if (rowDate === searchDate && rowClassId === searchClassId && rowSession === sessionValue) {
        foundRow = i + 2;
        Logger.log('FOUND MATCH at sheet row: ' + foundRow);
        break;
      }
    }

    if (foundRow > 0) {
      // Update existing record
      Logger.log('UPDATING existing row ' + foundRow);
      const targetRange = sheet.getRange(foundRow, 1, 1, record.length);
      targetRange.setValues([record]);
      Logger.log('Range updated: ' + targetRange.getA1Notation());
    } else {
      // Append new record
      Logger.log('NO MATCH FOUND - Appending new row');
      sheet.appendRow(record);
    }

    // Force write to sheet
    SpreadsheetApp.flush();
    Logger.log('SpreadsheetApp.flush() called');
    
    // Verify the write
    const verifyLastRow = sheet.getLastRow();
    Logger.log('After save operation, last row is: ' + verifyLastRow);

    Logger.log('=== END saveAttendanceRecord SUCCESS ===');
    
    return {
      success: true,
      message: 'Attendance saved successfully' + (foundRow > 0 ? ' (updated row ' + foundRow + ')' : ' (new row)'),
      record: {
        Date: date,
        ClassID: classId,
        Term: term,
        Week: week,
        MalesPresent: males,
        FemalesPresent: females,
        TotalPresent: totalPresent,
        Timestamp: timestamp,
        Session: sessionValue
      }
    };

  } catch (err) {
    Logger.log('=== ERROR in saveAttendanceRecord ===');
    Logger.log('Error message: ' + err.message);
    Logger.log('Error stack: ' + err.stack);
    return { success: false, error: 'Save failed: ' + err.message };
  }
}

function saveAttendanceWithLogging(params) {
  Logger.log('=== SAVE ATTENDANCE CALLED ===');
  Logger.log('Raw params object: ' + JSON.stringify(params));
  Logger.log('Params type: ' + typeof params);
  Logger.log('Params keys: ' + Object.keys(params || {}).join(', '));
  
  if (params) {
    Logger.log('date: ' + params.date + ' (type: ' + typeof params.date + ')');
    Logger.log('classId: ' + params.classId + ' (type: ' + typeof params.classId + ')');
    Logger.log('term: ' + params.term + ' (type: ' + typeof params.term + ')');
    Logger.log('week: ' + params.week + ' (type: ' + typeof params.week + ')');
    Logger.log('session: ' + params.session + ' (type: ' + typeof params.session + ')');
    Logger.log('malesPresent: ' + params.malesPresent + ' (type: ' + typeof params.malesPresent + ')');
    Logger.log('femalesPresent: ' + params.femalesPresent + ' (type: ' + typeof params.femalesPresent + ')');
  }
  
  const result = saveAttendanceRecord(params);
  
  Logger.log('Result: ' + JSON.stringify(result));
  Logger.log('=== END SAVE ATTENDANCE ===');
  
  return result;
}

function saveAttendance(params) {
  return saveAttendanceRecord(params);
}

function getAttendance(params) {
  try {
    const { classId, term, week, session } = params;
    
    const sheet = getSheetByName('Attendance');
    if (!sheet) {
      return { success: false, error: 'Attendance sheet not found' };
    }
    
    const data = sheet.getDataRange().getValues();
    const records = [];
    
    for (let i = 1; i < data.length; i++) {
      const row = data[i];
      let matches = true;
      
      if (classId && row[1] != classId) matches = false;
      if (term && row[2] != term) matches = false;
      if (week && row[3] != week) matches = false;
      if (session && row[8] && row[8].toString().toLowerCase() !== session.toLowerCase()) matches = false;
      
      if (matches) {
        records.push({
          date: row[0],
          classId: row[1],
          term: row[2],
          week: row[3],
          malesPresent: row[4],
          femalesPresent: row[5],
          totalPresent: row[6],
          timestamp: row[7],
          session: row[8]
        });
      }
    }
    
    return {
      success: true,
      records: records
    };
  } catch (error) {
    return { success: false, error: error.message };
  }
}

// ============================================
// Class Service Functions
// ============================================

function getClasses() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const sheet = ss.getSheetByName('Classes');
  
  if (!sheet) {
    return {
      success: false,
      error: 'Classes sheet not found. Please run Initialize Sheets first.'
    };
  }
  
  const data = sheet.getDataRange().getValues();
  const classes = [];
  
  for (let i = 1; i < data.length; i++) {
    if (data[i][0]) {
      classes.push({
        id: data[i][0].toString(),
        classCode: data[i][1],
        yearGroup: data[i][2],
        totalMales: parseInt(data[i][3]) || 0,
        totalFemales: parseInt(data[i][4]) || 0,
        classSize: parseInt(data[i][5]) || 0
      });
    }
  }
  
  return {
    success: true,
    classes: classes
  };
}

function getClassById(classId) {
  const classes = getDataAsObjects('Classes');
  return classes.find(c => c.ClassID == classId);
}

function saveClasses(params) {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  let sheet = ss.getSheetByName('Classes');
  
  if (!sheet) {
    sheet = ss.insertSheet('Classes');
    sheet.getRange('A1:G1').setValues([[
      'ID', 'Class Code', 'Year Group', 'Total Males', 'Total Females', 'Class Size', 'IsActive'
    ]]);
    sheet.getRange('A1:G1').setFontWeight('bold');
  }
  
  const classesJSON = params.classes;
  if (!classesJSON) {
    return {
      success: false,
      error: 'No classes data provided'
    };
  }
  
  const classes = JSON.parse(classesJSON);
  
  if (sheet.getLastRow() > 1) {
    sheet.getRange(2, 1, sheet.getLastRow() - 1, 7).clear();
  }
  
  const rows = classes.map(cls => [
    cls.id,
    cls.classCode,
    cls.yearGroup,
    cls.totalMales,
    cls.totalFemales,
    cls.classSize,
    cls.isActive !== undefined ? cls.isActive : true
  ]);
  
  if (rows.length > 0) {
    sheet.getRange(2, 1, rows.length, 7).setValues(rows);
  }
  
  return {
    success: true,
    message: `${classes.length} classes saved successfully`
  };
}

function saveAllClasses(params) {
  try {
    const classes = JSON.parse(params.classes);
    
    if (!classes || classes.length === 0) {
      return {error: 'No classes provided'};
    }
    
    const sheet = getSheetByName('Classes');
    
    const lastRow = sheet.getLastRow();
    if (lastRow > 1) {
      sheet.getRange(2, 1, lastRow - 1, sheet.getLastColumn()).clear();
    }

    const records = classes.map(cls => [
      cls.id,
      cls.classCode,
      cls.yearGroup,
      cls.totalMales,
      cls.totalFemales,
      cls.classSize,
      true
    ]);
    
    if (records.length > 0) {
      sheet.getRange(2, 1, records.length, records[0].length).setValues(records);
    }
    
    return {
      success: true,
      message: `${classes.length} classes saved successfully`
    };
  } catch (error) {
    return {error: error.message};
  }
}

// ============================================
// Terms Service Functions
// ============================================

function getTerms() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const sheet = ss.getSheetByName('Terms');
  
  if (!sheet) {
    return {
      success: false,
      error: 'Terms sheet not found.'
    };
  }
  
  const data = sheet.getDataRange().getValues();
  const terms = [];
  
  for (let i = 1; i < data.length; i++) {
    if (data[i][0]) {
      terms.push({
        id: data[i][0],
        name: data[i][1],
        startDate: data[i][2],
        endDate: data[i][3],
        weeks: parseInt(data[i][4]) || 0,
        isActive: data[i][5]
      });
    }
  }
  
  return {
    success: true,
    terms: terms
  };
}

function saveTerms(params) {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  let sheet = ss.getSheetByName('Terms');
  
  if (!sheet) {
    sheet = ss.insertSheet('Terms');
    sheet.getRange('A1:F1').setValues([[
      'TermID', 'Name', 'StartDate', 'EndDate', 'Weeks', 'IsActive'
    ]]);
    sheet.getRange('A1:F1').setFontWeight('bold');
  }
  
  const termsJSON = params.terms;
  if (!termsJSON) {
    return {
      success: false,
      error: 'No terms data provided'
    };
  }
  
  const terms = JSON.parse(termsJSON);
  
  if (sheet.getLastRow() > 1) {
    sheet.getRange(2, 1, sheet.getLastRow() - 1, 6).clear();
  }
  
  const rows = terms.map(term => [
    term.id,
    term.name,
    term.startDate,
    term.endDate,
    term.weeks,
    term.isActive
  ]);
  
  if (rows.length > 0) {
    sheet.getRange(2, 1, rows.length, 6).setValues(rows);
  }
  
  return {
    success: true,
    message: `${terms.length} terms saved successfully`
  };
}

// ============================================
// Sheet Service Functions
// ============================================

function getSheetByName(name) {
  return SpreadsheetApp.getActiveSpreadsheet().getSheetByName(name);
}

function getDataAsObjects(sheetName) {
  const sheet = getSheetByName(sheetName);
  if (!sheet) {
    throw new Error(`Sheet '${sheetName}' not found`);
  }
  
  const data = sheet.getDataRange().getValues();
  if (data.length < 2) {
    return [];
  }
  
  const headers = data[0];
  return data.slice(1).map(row => {
    const obj = {};
    headers.forEach((header, index) => {
      obj[header] = row[index];
    });
    return obj;
  });
}

function appendToSheet(sheetName, rowData) {
  const sheet = getSheetByName(sheetName);
  sheet.appendRow(rowData);
  return rowData;
}

// ============================================
// Report Service Functions
// ============================================

function getAttendanceStats(params) {
  try {
    const { classId, term } = params;
    
    if (!classId || !term) {
      return {success: false, error: 'Class ID and Term are required'};
    }
    
    const classObj = getClassById(classId);
    if (!classObj) {
      return {success: false, error: 'Class not found'};
    }
    
    const attendance = getDataAsObjects('Attendance');
    const termAttendance = attendance.filter(record => 
      record.ClassID == classId && record.Term == term
    );
    
    const totalMales = classObj.TotalMales || 0;
    const totalFemales = classObj.TotalFemales || 0;
    const classSize = classObj.ClassSize || 0;
    
    let totalMalesPresent = 0;
    let totalFemalesPresent = 0;
    let totalDays = termAttendance.length;
    
    termAttendance.forEach(record => {
      totalMalesPresent += parseInt(record.MalesPresent || 0);
      totalFemalesPresent += parseInt(record.FemalesPresent || 0);
    });
    
    const avgMalesPresent = totalDays > 0 ? (totalMalesPresent / totalDays) : 0;
    const avgFemalesPresent = totalDays > 0 ? (totalFemalesPresent / totalDays) : 0;
    const avgTotalPresent = totalDays > 0 ? ((totalMalesPresent + totalFemalesPresent) / totalDays) : 0;
    
    const maleAttendanceRate = totalMales > 0 ? (avgMalesPresent / totalMales) * 100 : 0;
    const femaleAttendanceRate = totalFemales > 0 ? (avgFemalesPresent / totalFemales) * 100 : 0;
    const overallAttendanceRate = classSize > 0 ? (avgTotalPresent / classSize) * 100 : 0;
    
    return {
      success: true,
      class: classObj,
      statistics: {
        totalDays: totalDays,
        totalMalesPresent: totalMalesPresent,
        totalFemalesPresent: totalFemalesPresent,
        avgMalesPresent: Math.round(avgMalesPresent * 100) / 100,
        avgFemalesPresent: Math.round(avgFemalesPresent * 100) / 100,
        avgTotalPresent: Math.round(avgTotalPresent * 100) / 100,
        maleAttendanceRate: Math.round(maleAttendanceRate * 100) / 100,
        femaleAttendanceRate: Math.round(femaleAttendanceRate * 100) / 100,
        overallAttendanceRate: Math.round(overallAttendanceRate * 100) / 100
      },
      attendanceRecords: termAttendance.length
    };
  } catch (error) {
    return {success: false, error: error.message};
  }
}

// ============================================
// Setup Service Functions
// ============================================

function setupSheets() {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    
    // Create or reset Classes sheet
    let sheet = ss.getSheetByName('Classes');
    if (sheet) {
      ss.deleteSheet(sheet);
    }
    sheet = ss.insertSheet('Classes');
    
    const classHeaders = ['ClassID', 'ClassCode', 'YearGroup', 'TotalMales', 'TotalFemales', 'ClassSize', 'IsActive'];
    sheet.getRange(1, 1, 1, classHeaders.length).setValues([classHeaders]);
    
    const sampleClasses = [
      [1, '1GRAN', '1st Years', 16, 0, 16, true],
      [2, '1TLEY', '1st Years', 16, 0, 16, true],
      [3, '2GRA', '2nd Years', 0, 10, 10, true],
      [4, '2NT', '2nd Years', 0, 8, 8, true],
      [5, '2LEY', '2nd Years', 15, 0, 15, true],
      [6, '3GR', '3rd Years', 8, 11, 19, true],
      [7, '3AN', '3rd Years', 9, 9, 18, true],
      [8, '3TL', '3rd Years', 8, 8, 16, true],
      [9, '3EY', '3rd Years', 14, 11, 25, true],
      [10, '4GR', '4th Years', 7, 9, 16, true],
      [11, '4A', '4th Years', 10, 5, 15, true],
      [12, '4NT', '4th Years', 7, 9, 16, true],
      [13, '4L', '4th Years', 12, 4, 16, true],
      [14, '4EY', '4th Years', 6, 13, 19, true],
      [15, 'L5GRA', 'L5th Years', 8, 7, 15, true],
      [16, 'L5NT', 'L5th Years', 8, 10, 18, true],
      [17, 'L5L', 'L5th Years', 5, 12, 17, true],
      [18, 'L5EY', 'L5th Years', 9, 16, 25, true],
      [19, 'U5G', 'U5th Years', 10, 11, 21, true],
      [20, 'U5N', 'U5th Years', 9, 11, 20, true],
      [21, 'U5T', 'U5th Years', 8, 12, 20, true],
      [22, 'U5LEY', 'U5th Years', 10, 10, 20, true],
      [23, 'U5MASCOLL', 'U5th Years', 14, 15, 29, true],
      [24, 'U5SRINGER', 'U5th Years', 10, 16, 26, true]
    ];
    
    sheet.getRange(2, 1, sampleClasses.length, classHeaders.length).setValues(sampleClasses);
    
    // Create or reset Attendance sheet (WITH Session column)
    sheet = ss.getSheetByName('Attendance');
    if (sheet) {
      ss.deleteSheet(sheet);
    }
    sheet = ss.insertSheet('Attendance');
    
    const attendanceHeaders = ['Date', 'ClassID', 'Term', 'Week', 'MalesPresent', 'FemalesPresent', 'TotalPresent', 'Timestamp', 'Session'];
    sheet.getRange(1, 1, 1, attendanceHeaders.length).setValues([attendanceHeaders]);
    
    // Create or reset Terms sheet
    sheet = ss.getSheetByName('Terms');
    if (sheet) {
      ss.deleteSheet(sheet);
    }
    sheet = ss.insertSheet('Terms');
    
    const termHeaders = ['TermID', 'Name', 'StartDate', 'EndDate', 'Weeks', 'IsActive'];
    sheet.getRange(1, 1, 1, termHeaders.length).setValues([termHeaders]);
    
    const sampleTerms = [
      ['term1', 'Term 1', '2024-09-08', '2024-12-15', 14, true],
      ['term2', 'Term 2', '2025-01-08', '2025-04-15', 14, true],
      ['term3', 'Term 3', '2025-04-22', '2025-07-15', 12, true]
    ];
    
    sheet.getRange(2, 1, sampleTerms.length, termHeaders.length).setValues(sampleTerms);
    
    return {
      success: true,
      message: 'Sheets setup completed successfully with sample data'
    };
  } catch (error) {
    return {success: false, error: 'Setup failed: ' + error.message};
  }
}
